2
swirl(bye)
exit
help()
install_from_swirl("Getting and Cleaning Data")
install_from_swirl("Getting and Cleaning Data")
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
?read.csv
mydf <- stringsasFactors = false
mydf <- read.csv(path2csv,stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion()
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
r_arch:country
select(cran, ip_id, package, country)
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
5:20
-(5:20)
select(cran, x:20)
select(cran, ip_id, package, country)
select(cran, -(x:20))
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran,
| r_version == "3.1.1", country == "US")
filter(cran,r_version == "3.1.1", country == "US")
?Comparison
filter(cran,r_version == "3.1.1", country == "US")
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
!is.na()
!is.na()
f
filter()
filter_(.data, .dots = lazyeval::lazy_dots(...))\
filter(cran, size > 100500, r_os == "linux-gnu")
filter(cran, !is.na(r_version))
arrange
?arrange
arrange
select(cran, size:ip_id)
select(cran, size:ip_id)
select(cran, size:ip_id)
select(cran, size:ip_id)
select(cran, size:ip_id)
select(cran, size:ip_id)
cran2<-select(cran, size:ip_id)
arrange(cran2, ip_id)
desc(ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
country (ascending), r_version
cran2
arrange(cran2, ip_id)
country (ascending), r_version
arrange(cran2, country, desc(r_version), ip_id)
select(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
size_gb
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes
)
summarize()
| mean(size))
summarize(cran, avg_bytes =mean(size))
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github",
key = "56b637a5baffac62cad9",
secret = "8e107541ae1791259e9987d544ca568633da2ebf")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
content(req)
swirl::swirl()
byw
exists()
swirl::swirl()
?read.csv
read.csv(path2csv)
read.csv(path2csv, stringsAsFactors = FALSE)
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm('mydf')
cran
?select
select(cran,ip-id,package,country)
select(cran,ip_id,package,country)
select(cran,5:20)
select(cran,ip_id,package,country,5:20)
select(cran,ip_id,package,country,0:20)
select(cran,0:20)
select(0:20)
select(cran,c(5:20)
)
select(cran,c(5:20))
select(cran,V5:V20)
5:20
select(cran,r_arch:country)
select(cran,-(r_arch:country))
select(cran,country:r_arch)
select(cran)
select(cran,:)
select(cran,:)
select(cran,:country)
cran
select(cran,-time
)
select(cran,-5:20)
select(cran,-(5:20))
-5:20
-(5:20)
select(cran,-(5:20))
select(cran,-(x:size))
select(cran,-(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version == "3.1.1", country == "UIndia")
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US"
| | country == "IN")
filter(cran, country == "US"
| country == "IN")
filter(cran)
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, size > 100500, r_os == "linux-gnu")
filter(cran, !is.na(r_version))
arrange()
cran2 <- select(cran)
cran2 <- select(cran,size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
Try arrange(cran2, package, ip_id)
arrange(cran2, package, ip_id)
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version)
)
arrange(cran2, country, desc(r_version),ip_id)
cran3 <- select(cran,ip_id, package,size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(dplyr)
cran<-tbl_df()
cran<-tbl_df(cran3)
cran<-tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package<-group_by(cran)
by_package<-group_by(cran,package)
by_package
summarize(cran)
summarize(by_package)
summarize(by_package,mean(size))
submit
submit()
reset()
submit()
submit()
pack_sum <- summarize(by_package,
count = ,
unique = ,
countries = ,
avg_bytes = )
count = n()
unique = n_distinct(ip_id)
count = n(1)
count = n(cran)
summarize(by_package,mean(size))
submit()
submit()
pack_sum <- summarize(by_package,
count = n(),
unique = n_distinct(ip_id),
countries = n_distinct(country),
avg_bytes = mean(size))
submit()
submit(pack_sum)
pack_sum <- summarize(by_package,
count = n(),
unique = n_distinct(ip_id),
countries = n_distinct(country),
avg_bytes = mean(size))
pack_sum
reset()
?submit
pack_sum
quantile(pack_sum$count, probs = 0.99)
quantile(pack_sum$count, probs = 0.99)
filter(pack_sum, count > 679)
top_counts<-filter(pack_sum, count > 679)
top_counts
View(top_counts)
?arrange
arrange(top_counts)
arrange(top_counts,desc(count)
)
arrange(top_counts,desc(count))
top_counts_sorted<-arrange(top_counts,desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique<-filter(pack_sum$unique, probs = 0.99)
top_unique<-filter(pack_sum)
top_unique<-filter(pack_sum, unique > 465)
View(top_unique)
arrange(top_unique)
top_unique_sorted<-arrange(top_unique, desc(unique))
View(top_unique_sorted)
?subimt
?submit
?submit
?submit
View(result3)
?submit
?submit
?reset
?submit
swirl()
swirl
swirl::swirl()
?submit
select(cran,ip_id,country,package,size)
print()
print(cran)
cran %>%
select(cran,ip_id,country,package,size) %>%
print
?submit
?submit
?submit
?submit
?submit
?submit
?submit
?submit
?submit
?submit
?submit
?submit
?submit
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
gather(students2, sex, count, -grade)
gather(students2, sex_class, count, -grade)
res<-gather(students2, sex_class, count, -grade)
res
?separate
separate(data = res, col = sex_class, into =
| c("sex", "class"))
separate(data = res, col = sex_class, into =c("sex", "class"))
?submit
students3
?submit
?submit
?submit
?gather
?submit
?spread
?submit
?submit
?submit
?submit
extract_numeric("class5")
?mutate
?submit
?submit
?submit
?submit
?submit
?submit
?mutate
?submit
?submit
?submit
?submit
?submit
?submit
?submit
?submit
?submit
library(readr)
library('readr)
''
;
.
library('readr')
install
install.packages('readr')
?submit
?submit
?submit
?submit
?submit
?submit
?submit
?submit
extract_numeric('class')
extract_numeric('class4')
extract_numeric('class4')
?submit
?submit
?submit
?submit
students4
?submit
?submit
?submit
k
passed
failed
passed <- passed %>%
mutate(status = "passed")
failed <- failed %>%
mutate(status = "failed")
packageVersion('dplyr')
bind_rows
?bind_rows
bind_rows(passed, failed)
sat
?submit
?submit
?submit
?submit
?submit
swirl::swirl()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = lubridate)
today()
this_day <- today()
this_day
year(this_day)
wday(this_day)
wday(this_day,label=true)
wday(this_day,label=TRUE)
now()
this_moment <- now()
this_moment
hour(this_moment)
ymd("1989-05-17")
my_date<-ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
ymd("March 12, 1975")
mdy("March 12, 1975")
mdy("25081985")
mdy(25081985)
dmy(25081985)
ymd("192012")
ymd("192012--")
ymd("1920/1/2")
dt1
ymd_hms(dt1)
hms(dt1)
hms("03:22:14")
dt2
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
update(this_moment)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
update(this_moment, hours = 10, minutes = 16, seconds = 0)
this_moment<-update(this_moment, hours = 10, minutes = 16, seconds = 0)
this_moment
now("America/New_York")
nyc<-now("America/New_York")
nyc
nyc + days(2)
a<-nyc + days(2)
depart<-nyc + days(2)
depart
depart<-update(hours (17) and minutes (34))
depart<-update(nyc,hours (17) and minutes (34))
depart<-update(depart, hours = 10, minutes = 16, seconds = 0)
depart <- update(depart, hours = 17, minutes = 34)
depart
arrive
arrive<-
arrive<-
nyc
arrive <- depart + hours(15) + minutes(50)
with_tz()
?with_tz()
?with_tz
with_tz("Asia/Hong_Kong")
with_tz("Asia/Hong_Kong")
arrive<-with_tz("Asia/Hong_Kong")
arrive<-with_tz("Asia/Hong_Kong")
arrive<-with_tz(arrive"Asia/Hong_Kong")
arrive<-with_tz(arrive,"Asia/Hong_Kong")
arrive
tz=singpore
tz="singapore"
mdy("June 17, 2008", tz = "Singapore")
last_time<-mdy("June 17, 2008", tz = "Singapore")
last_time
interval(last_time)
interval(arrive,last_time)
interval(last_arrive,arrive)
interval(last_time,arrive)
?interval
how_long<-interval(last_time,arrive)
as.period(how_long)
stopwatch()
source('run_analysis')
getwd
getwd()
source('~/run_analysis')
source('~/.run_analysis')
history
?history
source('~/run_analysis.R')
source('~/run_analysis.R')
source('~/run_analysis.R')
library(dplyr)
library(data.table)
install.packages("data.table")
library(tidyr)
install.packages("tidyr")
source('~/run_analysis.R')
source('~/run_analysis.R')
source('~/run_analysis.R')
source('~/nazrul_eds.R')
install.packages("rvest")
source('~/nazrul_eds.R')
source('~/nazrul_eds.R')
summary(oil_table)
summary(oil_table)
boxplot(oil_export1 ~ date_info1, data = oil_table,xlab = "Year of info", ylab = "bbl/day",
main = "The oil exports by country")
boxplot(oil_export1 ~ date_info1, data = oil_table,xlab = "Year of info", ylab = "bbl/day",
main = "The oil exports")
oil_table <- oil_table %>% mutate(quantile = ntile(oil_table$date_info1, 4))
choose_country <- oil_table[grep("ysia", oil_table$country), ]
choose_country$quantile
?mutate
??mutate
library(dplyr)
quantile
library(dplyr)
oil_table$quartile <- ntile(oil_table$oil_export1, 4)
oil_table
NEI <- readRDS("summarySCC_PM25.rds")
getwd
getwd()
setwd()
?setwd
setwd('D:\TM\HCP Anywhere\Training - Coursera\Assignment\Course 4\Week 4')
install.packages("knitr")
install.packages("rmarkdown")
title: "Testing"
install.packages("rattle")
install.packages('caret')
install.packages('rpart')
install.packages('rpart.plot')
install.packages('RColorBrewer')
install.packages('rattle')
install.packages('randomForest')
install.packages('knitr')
setwd("D:/TM/HCP Anywhere/Training-Coursera/Assignment/Course_8")
rattle()
library(rattle)
library(rattle)
library(caret)
library(rpart)
library(rpart.plot)
library(RColorBrewer)
library(rattle)
library(randomForest)
library(knitr)
myTesting
